# Westworld2 "San Francisco 1" Profile
#
# This is a Westworld2 tuning designed for maximum performance on domestic (US) WAN links. These links seem to take
# advantage of (and benefit from) jumbo frame transmission.
#

# Start with 256k portal.
#
# Starting with a larger portal size can increase the off-the-line speed, but this seems like a reasonable starting
# point, based on testing with a handful of links.
#
tx_portal_start_sz:           262144

# Set the portal size floor to 16k.
#
# We probably don't want to handle portal sizes any lower than this. It might even be smart to increase this by an order
# of magnitude for any reasonably performant internet link.
#
tx_portal_min_sz:             16384

# 1 gigabyte of portal should be plenty.
#
tx_portal_max_sz:             1073741824

# Increase the portal size after 2 successfully-acked packets.
#
tx_portal_increase_ct:        2

# Increase the portal size by 1.5x the accumulated data segment length. Westworld2 keeps an accumulator of the total
# length of the successfully-acked data segments. When we reach the threshold for a portal size increase, increase it
# by this fraction.
#
tx_portal_increase_frac:      1.5

# Decrease the portal size after 256 duplicate acks.
#
tx_portal_dup_ack_ct:         256

# Change the portal size by this fraction when the duplicate ack threshold is reached.
#
# So, every 256 duplicate acks, we reduce the portal size to 99.95% of its current size.
#
tx_portal_dup_ack_frac:       0.9995

# Decrease the portal size after 128 retransmission events.
#
tx_portal_retx_ct:            128

# After every 128 retransmission events, we reduce the portal size to 99.95% of its current size.
#
tx_portal_retx_frac:          0.9995

# When the connection is first established, we haven't yet done an RTT probe. So, just guess that the RTT is probably
# something like 200ms.
#
retx_start_ms:                100

# Add 25 milliseconds to whatever the RTT probe finds the RTT to be. We don't want to be over-eager in doing
# retransmission.
#
retx_add_ms:                  20

# Probe the RTT every 50 milliseconds. We want to be pretty sensitive to changes in RTT to make sure we're doing
# retransmission only when it's necessary, and without too much delay when it becomes necessary.
#
rtt_probe_ms:                 50

# Smooth the probed RTT value over the last 8 samples. This effectively means our effective RTT is smoothed over the
# last 250ms of activity.
#
rtt_probe_avg_ct:             5

# ~64k "jumbo" frames.
#
max_segment_sz:               63500

# RX and TX buffer sizes for the underlying socket. 4mb.
#
rx_buffer_sz:                 4194304
tx_buffer_sz:                 4194304

# Capture metrics and output them to the `logs/` directory.
#
instrument:
  name:                       metrics
  prefix:                     logs
