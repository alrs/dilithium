// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package westworld2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Header struct {
	_tab flatbuffers.Table
}

func GetRootAsHeader(buf []byte, offset flatbuffers.UOffsetT) *Header {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Header{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Header) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Header) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Header) Sequence() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Header) MutateSequence(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Header) Type() Type {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Type(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Header) MutateType(n Type) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *Header) Ack() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Header) MutateAck(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Header) Len() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Header) MutateLen(n int16) bool {
	return rcv._tab.MutateInt16Slot(10, n)
}

func HeaderStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func HeaderAddSequence(builder *flatbuffers.Builder, sequence int32) {
	builder.PrependInt32Slot(0, sequence, 0)
}
func HeaderAddType(builder *flatbuffers.Builder, type_ Type) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func HeaderAddAck(builder *flatbuffers.Builder, ack int32) {
	builder.PrependInt32Slot(2, ack, 0)
}
func HeaderAddLen(builder *flatbuffers.Builder, len int16) {
	builder.PrependInt16Slot(3, len, 0)
}
func HeaderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
